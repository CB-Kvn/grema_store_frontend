/* eslint-disable @typescript-eslint/no-explicit-any */
import { useEffect, useRef, useState } from "react";
import { Filter } from "../../interfaces/filters_interface_gre_sto";
import { add_url_filters } from "../../redux/reducers_slices/filters_gre_sto_slice";
import { useAppDispatch, useAppSelector } from "../../redux/store";
import { getProductsFilters } from "../../controllers/filters_controller_gre_sto";
import { reset_pagination } from "../../redux/reducers_slices/pagination_gre_sto";
import { filter } from "../../utils/navigate";
import { useNavigate } from "react-router-dom";
export const Filtering = ({
  name,
  type,
  list,
}: {
  name: string;
  type: string;
  list: string[];
}) => {
  const [isOpen, setIsOpen] = useState(false);
  const dropdownRef = useRef<HTMLDivElement | null>(null);
  const selectionFilters = useAppSelector((state) => state.filters.dataSearch);
  const pagination = useAppSelector((state) => state.pagination.value);
  const dispatch = useAppDispatch();
  const toggleDropdown = () => setIsOpen(!isOpen);
  const navigate = useNavigate();

  const handleClickOutside = (event: MouseEvent) => {
    if (
      dropdownRef.current &&
      event.target &&
      !dropdownRef.current.contains(event.target as Node)
    ) {
      setIsOpen(false);
    }
  };

  const handleCheckbox = (
    event: React.ChangeEvent<HTMLInputElement>,
    type: keyof Filter
  ) => {
    const { value, checked } = event.target;

    const updatedFilters = selectionFilters[type].map((filter) =>
      filter.value === value ? { ...filter, checked } : filter
    );

    if (!updatedFilters.some((filter) => filter.value === value) && checked) {
      updatedFilters.push({ value, checked });
    }

    const newFilters = {
      ...selectionFilters,
      [type]: updatedFilters.filter((filter) => filter.checked),
    };

    dispatch(add_url_filters({ dataSearch: newFilters }));
    dispatch(reset_pagination({ value: 1 }));
    getProductsFilters(newFilters, dispatch, 1);
    filter("filter", newFilters, dispatch, pagination, navigate);
  };

  const isChecked = (type: keyof Filter, value: string): boolean => {
    return selectionFilters[type].some(
      (element) => element.value === value && element.checked
    );
  };

  useEffect(() => {
    document.addEventListener("mousedown", handleClickOutside);
    return () => {
      document.removeEventListener("mousedown", handleClickOutside);
    };
  }, []);

  return (
    <div className="relative inline-block text-left" ref={dropdownRef}>
      <div
        onClick={toggleDropdown}
        className="cursor-pointer inline-flex justify-between w-full px-4 py-2  text-sm font-medium text-gray-700  focus:outline-none focus:ring-2 focus:ring-offset-2 focus:ring-indigo-500"
        id="menu-button"
        aria-expanded={isOpen}
        aria-haspopup="true"
      >
        {name}
        <svg
          className="-mr-1 ml-2 h-5 w-5"
          xmlns="http://www.w3.org/2000/svg"
          viewBox="0 0 20 20"
          fill="currentColor"
          aria-hidden="true"
        >
          <path
            fillRule="evenodd"
            d="M5.293 7.293a1 1 0 011.414 0L10 10.586l3.293-3.293a1 1 0 011.414 1.414l-4 4a1 1 0 01-1.414 0l-4-4a1 1 0 010-1.414z"
            clipRule="evenodd"
          />
        </svg>
      </div>

      {isOpen && (
        <>
          {type === "categories" ? (
            <div
              className="origin-top-right h-40 overflow-y-auto absolute right-0 p-1 w-40 rounded-md shadow-lg bg-white ring-1 ring-black ring-opacity-5 focus:outline-none z-10"
              role="menu"
              aria-orientation="vertical"
              aria-labelledby="menu-button"
            >
              <div className="" role="none">
                <div className="form-control">
                  <label className="label cursor-pointer">
                    <i>
                      <svg
                        fill="#9F587B"
                        height="20px"
                        width="20px"
                        version="1.1"
                        id="Layer_1"
                        xmlns="http://www.w3.org/2000/svg"
                        viewBox="0 0 512.587 512.587"
                      >
                        <g id="SVGRepo_bgCarrier" stroke-width="0"></g>
                        <g
                          id="SVGRepo_tracerCarrier"
                          stroke-linecap="round"
                          stroke-linejoin="round"
                        ></g>
                        <g id="SVGRepo_iconCarrier">
                          {" "}
                          <g transform="translate(1 1)">
                            {" "}
                            <g>
                              {" "}
                              <g>
                                {" "}
                                <path d="M137.533,38.84c1.707,1.707,4.267,3.413,6.827,3.413c1.707,0,3.413-0.853,4.267-0.853c4.267-2.56,5.12-7.68,2.56-11.947 l-17.067-25.6c-2.56-4.267-7.68-5.12-11.947-2.56c-3.413,2.56-4.267,7.68-1.707,11.947L137.533,38.84z"></path>{" "}
                                <path d="M434.493,110.52c2.56,0,4.267-0.853,5.973-2.56l25.6-25.6c3.413-3.413,3.413-8.533,0-11.947 c-3.413-3.413-8.533-3.413-11.947,0l-25.6,25.6c-3.413,3.413-3.413,8.533,0,11.947 C430.227,109.667,431.933,110.52,434.493,110.52z"></path>{" "}
                                <path d="M65,70.413c-3.413-3.413-8.533-3.413-11.947,0s-3.413,8.533,0,11.947l25.6,25.6c1.707,1.707,3.413,2.56,5.973,2.56 s4.267-0.853,5.973-2.56c3.413-3.413,3.413-8.533,0-11.947L65,70.413z"></path>{" "}
                                <path d="M361.107,40.547c1.707,0.853,3.413,1.707,5.12,1.707c2.56,0,5.12-1.707,6.827-4.267l17.067-25.6 C392.68,8.12,391.827,3,387.56,0.44S378.173-1.267,375.613,3l-17.067,25.6C355.987,32.867,356.84,37.987,361.107,40.547z"></path>{" "}
                                <path d="M373.907,473.187c-2.56-4.267-7.68-5.12-11.947-2.56c-4.267,2.56-5.12,7.68-2.56,11.947l17.067,25.6 c1.707,1.707,4.267,3.413,6.827,3.413c1.707,0,3.413-0.853,5.12-0.853c4.267-2.56,5.12-7.68,2.56-11.947L373.907,473.187z"></path>{" "}
                                <path d="M70.12,403.213l-25.6,25.6c-3.413,3.413-3.413,8.533,0,11.947c1.707,1.707,3.413,2.56,5.973,2.56 c2.56,0,4.267-0.853,5.973-2.56l25.6-25.6c3.413-3.413,3.413-8.533,0-11.947C78.653,399.8,73.533,399.8,70.12,403.213z"></path>{" "}
                                <path d="M431.933,403.213c-3.413-3.413-8.533-3.413-11.947,0c-3.413,3.413-3.413,8.533,0,11.947l25.6,25.6 c1.707,1.707,3.413,2.56,5.973,2.56s4.267-0.853,5.973-2.56c3.413-3.413,3.413-8.533,0-11.947L431.933,403.213z"></path>{" "}
                                <path d="M148.627,469.773c-4.267-2.56-9.387-1.707-11.947,2.56l-17.067,25.6c-2.56,4.267-1.707,9.387,2.56,11.947 c1.707,0.853,3.413,1.707,5.12,1.707c2.56,0,5.12-1.707,6.827-4.267l17.067-25.6 C153.747,477.453,152.893,472.333,148.627,469.773z"></path>{" "}
                                <path d="M255.293,42.253c5.12,0,8.533-3.413,8.533-8.533V8.12c0-5.12-3.413-8.533-8.533-8.533c-5.12,0-8.533,3.413-8.533,8.533 v25.6C246.76,38.84,250.173,42.253,255.293,42.253z"></path>{" "}
                                <path d="M255.293,468.92c-5.12,0-8.533,3.413-8.533,8.533v25.6c0,5.12,3.413,8.533,8.533,8.533c5.12,0,8.533-3.413,8.533-8.533 v-25.6C263.827,472.333,260.413,468.92,255.293,468.92z"></path>{" "}
                                <path d="M41.96,212.92h25.6c5.12,0,8.533-3.413,8.533-8.533c0-5.12-3.413-8.533-8.533-8.533h-25.6 c-5.12,0-8.533,3.413-8.533,8.533C33.427,209.507,36.84,212.92,41.96,212.92z"></path>{" "}
                                <path d="M67.56,323.853c5.12,0,8.533-3.413,8.533-8.533s-3.413-8.533-8.533-8.533h-25.6c-5.12,0-8.533,3.413-8.533,8.533 s3.413,8.533,8.533,8.533H67.56z"></path>{" "}
                                <path d="M443.027,195.853c-5.12,0-8.533,3.413-8.533,8.533c0,5.12,3.413,8.533,8.533,8.533h25.6c5.12,0,8.533-3.413,8.533-8.533 c0-5.12-3.413-8.533-8.533-8.533H443.027z"></path>{" "}
                                <path d="M468.627,306.787h-25.6c-5.12,0-8.533,3.413-8.533,8.533s3.413,8.533,8.533,8.533h25.6c5.12,0,8.533-3.413,8.533-8.533 S473.747,306.787,468.627,306.787z"></path>{" "}
                                <path d="M408.04,378.791V128.44c0.465-1.394,0.41-2.784,0-4.04v-0.227l-0.133-0.155c-0.355-0.9-0.892-1.723-1.574-2.405 l-51.2-59.733c-0.358-0.358-0.76-0.669-1.185-0.952l-1.375-1.608H157.16l-55.467,64.853V387l0.904,1.057 c0.216,0.501,0.469,1.002,0.803,1.503l51.2,59.733c0.358,0.358,0.76,0.669,1.185,0.952l1.375,1.608h196.267l11.703-14.08 l42.057-49.066c1.707-1.707,2.56-4.267,1.707-6.827C408.893,380.805,408.578,379.739,408.04,378.791z M159.72,368.227 l24.747,24.747l-23.893,35.84l-36.693-42.667L159.72,368.227z M198.973,383.587l-29.013-29.013v-197.12l29.867-29.867h111.787 l14.507,14.507l14.507,14.507v197.973l-29.013,29.013H198.973z M350.867,368.227l35.84,17.92l-36.693,42.667l-23.893-35.84 L350.867,368.227z M350.867,142.947L326.12,118.2l23.893-35.84l36.693,42.667L350.867,142.947z M310.476,110.52H200.964 l-22.756-34.133h155.022L310.476,110.52z M160.573,82.36l23.893,35.84l-24.747,24.747l-35.831-17.915l18.337-21.338 L160.573,82.36z M118.76,141.24l34.133,17.067V352.44l-34.133,17.067V141.24z M200.111,400.653h110.365l22.756,34.133H177.356 L200.111,400.653z M357.693,352.44V157.453l34.987-17.493v229.973L357.693,352.44z"></path>{" "}
                                <path d="M314.173,282.04c0-27.307-29.013-41.813-29.867-41.813c-7.68-5.12-11.947-10.24-12.8-17.067 c-2.56-14.507,10.24-32.427,15.36-38.4c2.56-2.56,3.413-6.827,0.853-10.24c-2.56-3.413-6.827-5.12-10.24-3.413 c-3.413,0.853-81.92,32.427-81.92,110.08c0,33.28,26.453,59.733,59.733,59.733C288.573,340.92,315.027,314.467,314.173,282.04z M255.293,323.853c-23.893,0-42.667-18.773-42.667-42.667c0-39.253,24.747-64.853,45.227-79.36 c-2.56,6.827-4.267,15.36-2.56,23.893c2.56,11.947,9.387,21.333,22.187,29.013c0,0,20.48,10.24,20.48,26.453 C297.96,305.08,279.187,323.853,255.293,323.853z"></path>{" "}
                              </g>{" "}
                            </g>{" "}
                          </g>{" "}
                        </g>
                      </svg>
                    </i>
                    <span className="label-text">Sets</span>
                    <input
                      type="checkbox"
                      className="checkbox  checkbox-sm"
                      checked={isChecked("categoria", "Sets")}
                      value="Sets"
                      onChange={(e) => {
                        handleCheckbox(e, "categoria");
                      }}
                    />
                  </label>
                </div>
              </div>

              <div className="" role="none">
                <div className="form-control">
                  <label className="label cursor-pointer">
                    <i>
                      <svg
                        fill="#9F587B"
                        height="20px"
                        width="20px"
                        viewBox="0 0 64 64"
                        xmlns="http://www.w3.org/2000/svg"
                      >
                        <g id="SVGRepo_bgCarrier" stroke-width="0"></g>
                        <g
                          id="SVGRepo_tracerCarrier"
                          stroke-linecap="round"
                          stroke-linejoin="round"
                        ></g>
                        <g id="SVGRepo_iconCarrier">
                          {" "}
                          <g data-name="Gemstone ring" id="Gemstone_ring">
                            {" "}
                            <path d="M32,27h0a12.26,12.26,0,1,0,8.67,3.59A12.19,12.19,0,0,0,32,27Zm0,22.53A10.27,10.27,0,0,1,32,29h0a10.27,10.27,0,0,1,0,20.53Z"></path>{" "}
                            <path d="M11.6,20.06a6.68,6.68,0,0,1,3,3c.49,1,.84,1.68,1.68,1.68S17.42,24,17.91,23a6.68,6.68,0,0,1,2.95-3c1-.49,1.68-.85,1.68-1.69s-.7-1.19-1.68-1.68a6.73,6.73,0,0,1-2.95-3c-.49-1-.84-1.68-1.68-1.68s-1.19.7-1.68,1.68a6.73,6.73,0,0,1-3,3h0c-1,.49-1.68.85-1.68,1.68S10.62,19.57,11.6,20.06Zm4.63-5.22a8.7,8.7,0,0,0,3.53,3.53,8.72,8.72,0,0,0-3.53,3.54,8.74,8.74,0,0,0-3.54-3.54A8.72,8.72,0,0,0,16.23,14.84Z"></path>{" "}
                            <path d="M50.77,27.84c-.22-1.07-.38-1.84-1.19-2.06s-1.33.37-2.06,1.19a6.36,6.36,0,0,1-1.67,1.34,17.61,17.61,0,0,0-5-4.34A3,3,0,0,0,39.55,19l1.18-2.84a1,1,0,0,0,0-.77L38.44,9.9a1,1,0,0,0-.54-.54L32.38,7.08a.92.92,0,0,0-.76,0L26.1,9.36a1,1,0,0,0-.54.54l-2.29,5.52a1,1,0,0,0,0,.77l1.19,2.86A3,3,0,0,0,23.19,24,17.67,17.67,0,0,0,32,57h0A17.72,17.72,0,0,0,49.7,39.31a17.5,17.5,0,0,0-.34-3.4A6.57,6.57,0,0,1,52,34.71c1.07-.23,1.84-.39,2.06-1.19s-.38-1.34-1.19-2.07A6.67,6.67,0,0,1,50.77,27.84ZM33,18.86V16.8h5.31l-.86,2.06Zm-6.45,0-.86-2.07H31v2.07ZM33,9.5l2.75,1.14L33,13.39Zm-2,3.89-2.75-2.75L31,9.5Zm7.31,1.41h-3.9l2.76-2.75ZM26.83,12.05l2.76,2.75h-3.9Zm-1.4,8.82H38.57a1,1,0,0,1,1,1.05,1,1,0,0,1-1,1.05L25.43,23h0a1,1,0,0,1-.75-.31,1.08,1.08,0,0,1-.3-.75A1.06,1.06,0,0,1,25.43,20.87ZM32,55a15.68,15.68,0,0,1-6.35-30l12.7,0a15.65,15.65,0,0,1,5.53,4.1c-1.06.22-1.82.39-2,1.19s.37,1.33,1.19,2.06a6.72,6.72,0,0,1,2.08,3.61c.22,1.07.38,1.84,1.19,2.06a1.26,1.26,0,0,0,.33.05,1.51,1.51,0,0,0,1-.44,16.37,16.37,0,0,1,.1,1.72A15.72,15.72,0,0,1,32,55ZM47,35.3A8.71,8.71,0,0,0,44.53,31a8.75,8.75,0,0,0,4.33-2.5,8.79,8.79,0,0,0,2.5,4.33A9,9,0,0,0,47,35.3Z"></path>{" "}
                          </g>{" "}
                        </g>
                      </svg>
                    </i>
                    <span className="label-text">Anillos</span>
                    <input
                      type="checkbox"
                      className="checkbox  checkbox-sm"
                      checked={isChecked("categoria", "Anillos")}
                      value="Anillos"
                      onChange={(e) => {
                        handleCheckbox(e, "categoria");
                      }}
                    />
                  </label>
                </div>
              </div>

              <div className="" role="none">
                <div className="form-control">
                  <label className="label cursor-pointer">
                    <i>
                      <svg
                        fill="#9F587B"
                        height="20px"
                        width="20px"
                        version="1.1"
                        id="Layer_1"
                        xmlns="http://www.w3.org/2000/svg"
                        viewBox="0 0 511.994 511.994"
                      >
                        <g id="SVGRepo_bgCarrier" stroke-width="0"></g>
                        <g
                          id="SVGRepo_tracerCarrier"
                          stroke-linecap="round"
                          stroke-linejoin="round"
                        ></g>
                        <g id="SVGRepo_iconCarrier">
                          {" "}
                          <g>
                            {" "}
                            <g>
                              {" "}
                              <path d="M508.25,48.545c-5.001-5.001-13.099-5.001-18.099,0L255.996,282.7L21.85,48.545c-5.001-5.001-13.099-5.001-18.099,0 c-5,5.001-5,13.099,0,18.099l170.633,170.633c-18.884,2.398-33.587,18.389-33.587,37.914c0,21.171,17.229,38.4,38.4,38.4 c19.524,0,35.516-14.703,37.914-33.587l22.383,22.383c-15.002,22.605-47.497,74.53-47.497,100.813c0,35.285,28.698,64,64,64 c35.302,0,64-28.715,64-64c0-26.283-32.495-78.208-47.497-100.804l22.383-22.383c2.398,18.884,18.389,33.587,37.914,33.587 c21.171,0,38.4-17.229,38.4-38.4c0-19.524-14.703-35.516-33.587-37.914L508.25,66.653 C513.242,61.652,513.242,53.546,508.25,48.545z M179.196,287.999c-7.049,0-12.8-5.734-12.8-12.8s5.751-12.8,12.8-12.8 s12.8,5.734,12.8,12.8S186.244,287.999,179.196,287.999z M294.396,403.199c0,21.171-17.229,38.4-38.4,38.4s-38.4-17.229-38.4-38.4 c0-13.978,19.977-50.466,38.4-79.266C274.419,352.724,294.396,389.196,294.396,403.199z M345.596,275.199 c0,7.066-5.751,12.8-12.8,12.8c-7.049,0-12.8-5.734-12.8-12.8s5.751-12.8,12.8-12.8 C339.844,262.399,345.596,268.133,345.596,275.199z"></path>{" "}
                            </g>{" "}
                          </g>{" "}
                        </g>
                      </svg>
                    </i>
                    <span className="label-text">Collares</span>
                    <input
                      type="checkbox"
                      className="checkbox  checkbox-sm"
                      checked={isChecked("categoria", "Collares")}
                      value="Collares"
                      onChange={(e) => {
                        handleCheckbox(e, "categoria");
                      }}
                    />
                  </label>
                </div>
              </div>

              <div className="" role="none">
                <div className="form-control">
                  <label className="label cursor-pointer">
                    <i>
                      <svg
                        viewBox="0 0 960 960"
                        fill="none"
                        height="20px"
                        width="20px"
                        xmlns="http://www.w3.org/2000/svg"
                      >
                        <g id="SVGRepo_bgCarrier" stroke-width="0"></g>
                        <g
                          id="SVGRepo_tracerCarrier"
                          stroke-linecap="round"
                          stroke-linejoin="round"
                        ></g>
                        <g id="SVGRepo_iconCarrier">
                          {" "}
                          <path
                            d="M748.981 715.128C887.58 922.824 563.719 951.034 663.126 730.48C522.04 702.377 535.404 539.389 608.678 448.765C580.588 434.023 570.074 396.229 586.186 369.198C557.477 349.143 548.946 307.881 574.358 276.323C588.616 254.857 560.642 209.089 546.872 190.537C478.812 91.2047 598.519 25.4806 645.211 143.087C650.665 152.982 654.6 166.324 668.41 165.874C687.139 165.592 688.681 191.731 671.331 195.638C629.867 206.987 620.377 156.259 600.563 131.894C570.657 105.167 560.851 119.251 570.922 153.867C572.207 158.811 575.688 163.468 579.044 167.544C600.546 193.126 611.326 223.298 618.033 255.577C663.002 249.209 684.849 304.36 667.508 339.816C694.607 361.008 701.323 387.737 691.143 420.596C813.356 463.75 859.449 637.055 748.981 715.128ZM589.287 595.902C583.311 658.855 649.608 714.333 709.928 689.938C724.557 683.879 736.612 676.362 746.004 664.516C809.133 586.759 750.375 481.179 657.213 452.77C654.799 451.773 649.706 453.43 647.817 455.579C612.149 496.13 591.857 543.146 589.287 595.902ZM705.583 733.759C704.539 733.618 703.496 733.477 702.452 733.335C692.068 759.28 680.902 785.61 684.413 814.17C699.314 874.702 786.321 834.887 705.583 733.759ZM613.735 397.941C614.967 413.884 630.851 423.171 644.204 415.538C659.069 409.956 661.724 374.732 642.614 377.753C626.246 380.619 617.837 379.142 613.735 397.941ZM634.163 312.354C634.689 296.086 627.778 294.656 614.282 299.409C600.254 299.653 600.548 310.661 599.769 321.994C605.103 347.757 636.209 334.328 634.163 312.354Z"
                            fill="#9F587B"
                          ></path>{" "}
                          <path
                            d="M298.276 720.189C174.45 645.358 238.971 498.016 339.032 435.351C317.822 413.092 320.011 372.952 342.799 353.845C324.77 319.378 329.888 279.94 365.117 260.003C382.936 244.388 372.483 191.516 365.449 170.461C333.94 56.7841 469.545 28.2161 474.868 164.292C475.169 173.037 478.871 182.167 486.539 186.555C509.015 195.99 497.33 222.117 475.837 216.127C459.77 211.84 449.655 201.338 445.998 185.419C439.399 161.591 444.359 131.506 422.072 115.106C414.54 109.472 409.602 110.472 405.049 118.794C398.452 130.855 398.008 143.899 402.526 156.246C415.001 188.799 415.372 221.979 411.84 255.866C452.875 264.848 460.65 318.032 430.554 352.518C449.526 374.987 445.559 416.009 425.26 435.784C527.147 514.48 514.794 694.091 385.603 732.273C439.326 983.826 133.029 885.117 298.276 720.189ZM454.644 575.966C448.076 527.687 422.935 485.779 383.767 455.251C381.723 453.427 376.024 453.404 373.368 454.914C304.865 492.856 224.071 592.402 288.368 666.21C354.87 741.811 457.629 666.299 454.644 575.966ZM337.616 735.87C336.645 735.662 335.675 735.453 334.704 735.245C309.772 759.34 261.359 819.29 310.675 841.986C324.656 845.917 337.449 837.586 343.41 820.47C353.482 792.421 343.956 763.548 337.616 735.87ZM403.146 389.307C402.69 387.983 402.224 382.247 400.262 381.678C391.269 379.074 381.583 375.725 372.671 376.842C363.386 378.006 358.165 393.208 361.484 402.777C370.328 427.115 404.524 415.289 403.146 389.307ZM409.824 307.509C409.838 297.718 407.658 295.755 398.558 296.092C390.755 296.888 382.851 291.793 378.3 300.407C353.949 335.588 406.615 344.496 409.824 307.509Z"
                            fill="#9F587B"
                          ></path>{" "}
                          <path
                            d="M887.458 303.373C911.413 303.515 915.464 332.886 898.827 346.528C874.419 372.839 849.757 398.916 825.253 425.14C819.287 431.525 812.453 435.608 803.417 434.281C775.612 428.272 785.801 398.503 801.086 383.822C829.43 356.579 851.032 319.853 886.382 301.492C886.741 302.118 887.099 302.746 887.458 303.373Z"
                            fill="#9F587B"
                          ></path>{" "}
                          <path
                            d="M150.42 553.954C121.417 545.523 90.0106 532.076 61.0906 521.737C31.3906 514.021 34.2006 470.147 67.0586 471.512C99.4746 480.246 129.716 497.611 161.196 509.708C164.027 510.932 166.568 513.043 168.929 515.103C186 530.376 174.994 555.455 150.42 553.954Z"
                            fill="#9F587B"
                          ></path>{" "}
                          <path
                            d="M180.844 695.664C180.759 704.456 176.436 710.704 169.346 715.534C140.23 733.067 114.509 758.404 82.8211 770.727C55.8391 775.905 44.2551 737.774 67.1461 724.191C92.2711 712.445 172.906 637.776 180.844 695.664Z"
                            fill="#9F587B"
                          ></path>{" "}
                          <path
                            d="M896.626 778.53C887.567 777.743 880.489 774.036 875.35 767.481C859.191 746.87 843.229 726.1 827.559 705.116C818.819 693.97 814.012 675.444 827.739 666.378C840.37 656.543 855.5 666.09 863.65 677.383C879.783 696.447 895.624 715.759 911.776 734.806C927.354 752.866 917.875 775.277 896.626 778.53Z"
                            fill="#9F587B"
                          ></path>{" "}
                          <path
                            d="M174.656 361.935C176.867 339.64 203.816 328.669 219.059 346.065C233.866 365.087 249.241 384.119 262.618 404.165C274.388 430.987 238.706 446.925 222.294 424.989C205.847 404.429 183.782 387.245 174.656 361.935Z"
                            fill="#9F587B"
                          ></path>{" "}
                          <path
                            d="M872.075 593.742C847.979 598.877 830.753 568.007 852.865 554.75C870.937 546.134 902.875 537.689 907.293 565.55C910.735 584.748 889.215 596.019 872.075 593.386C872.075 593.505 872.075 593.624 872.075 593.742Z"
                            fill="#9F587B"
                          ></path>{" "}
                          <path
                            d="M589.286 595.904C591.856 543.148 612.148 496.133 647.815 455.58C649.705 453.431 654.797 451.774 657.216 452.768C750.375 481.201 809.144 586.777 745.997 664.521C736.61 676.364 724.554 683.881 709.924 689.94C649.604 714.33 583.314 658.86 589.286 595.904ZM651.974 557.366C651.73 543.268 640.722 529.904 625.637 533.238C588.822 541.502 616.165 616.506 630.198 637.477C641.338 653.31 668.873 684.661 686.524 660.984C691.214 653.378 689.875 644.06 681.683 637.594C659.674 618.022 647.075 586.876 651.974 557.366Z"
                            fill="white"
                          ></path>{" "}
                          <path
                            d="M705.581 733.76C786.273 834.769 699.393 874.772 684.407 814.172C680.902 785.609 692.064 759.283 702.45 733.336C703.494 733.477 704.538 733.619 705.581 733.76Z"
                            fill="white"
                          ></path>{" "}
                          <path
                            d="M613.734 397.944C617.846 379.132 626.246 380.624 642.615 377.758C661.721 374.735 659.07 409.956 644.202 415.539C630.851 423.175 614.966 413.887 613.734 397.944Z"
                            fill="white"
                          ></path>{" "}
                          <path
                            d="M634.162 312.354C636.204 334.327 605.101 347.76 599.766 321.993C600.556 310.641 600.244 299.663 614.28 299.41C627.775 294.663 634.692 296.082 634.162 312.354Z"
                            fill="white"
                          ></path>{" "}
                          <path
                            d="M454.643 575.965C457.639 666.278 354.841 741.828 288.368 666.207C224.077 592.354 304.86 492.917 373.365 454.914C376.024 453.404 381.722 453.427 383.77 455.248C422.926 485.797 448.087 527.676 454.643 575.965ZM291.235 588.694C294.667 615.539 298.188 648.449 323.311 665.245C330.912 670.403 339.731 669.421 344.584 663.861C359.672 642.775 308.309 630.482 335.792 563.088C341.406 540.691 310.428 528.301 299.384 549.087C292.92 561.477 294.007 574.062 291.235 588.694Z"
                            fill="white"
                          ></path>{" "}
                          <path
                            d="M337.618 735.871C343.958 763.546 353.485 792.425 343.412 820.471C337.451 837.586 324.658 845.917 310.677 841.985C261.368 819.245 309.753 759.394 334.706 735.246C335.677 735.454 336.647 735.662 337.618 735.871Z"
                            fill="white"
                          ></path>{" "}
                          <path
                            d="M403.146 389.307C404.526 415.289 370.324 427.117 361.483 402.777C358.166 393.208 363.386 378.006 372.671 376.842C381.582 375.725 391.269 379.073 400.262 381.678C402.224 382.246 402.69 387.983 403.146 389.307Z"
                            fill="white"
                          ></path>{" "}
                          <path
                            d="M409.824 307.511C406.595 344.52 353.953 335.568 378.298 300.407C382.856 291.799 390.75 296.886 398.558 296.095C407.658 295.756 409.838 297.72 409.824 307.511Z"
                            fill="white"
                          ></path>{" "}
                          <path
                            d="M651.973 557.363C647.078 586.868 659.668 618.02 681.679 637.592C689.873 644.057 691.213 653.375 686.521 660.981C668.852 684.66 641.357 653.294 630.2 637.475C616.164 616.492 588.818 541.559 625.634 533.234C640.729 529.938 651.723 543.231 651.973 557.363Z"
                            fill="#9F587B"
                          ></path>{" "}
                          <path
                            d="M291.238 588.694C294.008 574.061 292.924 561.477 299.386 549.086C310.432 528.327 341.41 540.667 335.791 563.089C308.309 630.616 359.506 642.239 344.59 663.861C339.733 669.421 330.914 670.403 323.313 665.245C298.193 648.452 294.668 615.537 291.238 588.694Z"
                            fill="#9F587B"
                          ></path>{" "}
                        </g>
                      </svg>
                    </i>
                    <span className="label-text">Aretes</span>
                    <input
                      type="checkbox"
                      className="checkbox  checkbox-sm"
                      checked={isChecked("categoria", "Aretes")}
                      value="Aretes"
                      onChange={(e) => {
                        handleCheckbox(e, "categoria");
                      }}
                    />
                  </label>
                </div>
              </div>

              <div className="" role="none">
                <div className="form-control">
                  <label className="label cursor-pointer">
                    <i>
                      <svg
                        viewBox="0 0 72 72"
                        id="emoji"
                        xmlns="http://www.w3.org/2000/svg"
                        fill="#9F587B"
                        height="20px"
                        width="20px"
                      >
                        <g id="SVGRepo_bgCarrier" stroke-width="0"></g>
                        <g
                          id="SVGRepo_tracerCarrier"
                          stroke-linecap="round"
                          stroke-linejoin="round"
                        ></g>
                        <g id="SVGRepo_iconCarrier">
                          {" "}
                          <g id="color">
                            {" "}
                            <path
                              fill="#D0CFCE"
                              stroke="none"
                              d="M42.6346,12.4476C42.1772,8.8038,39.0678,5.985,35.3,5.985c-4.0828,0-7.3925,3.3097-7.3925,7.3925v3.8019 c0,4.0828,3.3098,7.3925,7.3925,7.3925s7.3925-3.3097,7.3925-7.3925v-3.8019C42.6925,13.0625,42.6728,12.7522,42.6346,12.4476z M39.5468,16.3704c0,2.3455-1.9014,4.2468-4.2468,4.2468s-4.2468-1.9014-4.2468-4.2468v-2.184 c0-2.3455,1.9014-4.2467,4.2468-4.2467c2.1645,0,3.9507,1.6191,4.2135,3.7124c0.022,0.175,0.0333,0.3533,0.0333,0.5343V16.3704z"
                            ></path>{" "}
                            <path
                              fill="#D0CFCE"
                              stroke="none"
                              d="M42.6346,33.2616c-0.4574-3.6438-3.5668-6.4625-7.3346-6.4625c-4.0828,0-7.3925,3.3097-7.3925,7.3925 v3.8019c0,4.0828,3.3098,7.3925,7.3925,7.3925s7.3925-3.3097,7.3925-7.3925v-3.8019 C42.6925,33.8766,42.6728,33.5663,42.6346,33.2616z M39.5468,37.1844c0,2.3455-1.9014,4.2468-4.2468,4.2468 s-4.2468-1.9014-4.2468-4.2468v-2.184c0-2.3455,1.9014-4.2467,4.2468-4.2467c2.1645,0,3.9507,1.6191,4.2135,3.7124 c0.022,0.175,0.0333,0.3533,0.0333,0.5343V37.1844z"
                            ></path>{" "}
                            <path
                              fill="#D0CFCE"
                              stroke="none"
                              d="M42.6346,54.0756c-0.4574-3.6438-3.5668-6.4625-7.3346-6.4625c-4.0828,0-7.3925,3.3097-7.3925,7.3925 v3.8019c0,4.0828,3.3098,7.3925,7.3925,7.3925s7.3925-3.3097,7.3925-7.3925v-3.8019 C42.6925,54.6906,42.6728,54.3803,42.6346,54.0756z M39.5468,57.9984c0,2.3455-1.9014,4.2468-4.2468,4.2468 s-4.2468-1.9014-4.2468-4.2468v-2.184c0-2.3455,1.9014-4.2467,4.2468-4.2467c2.1645,0,3.9507,1.6191,4.2135,3.7124 c0.022,0.175,0.0333,0.3533,0.0333,0.5343V57.9984z"
                            ></path>{" "}
                          </g>{" "}
                          <g id="hair"></g> <g id="skin"></g>{" "}
                          <g id="skin-shadow"></g>{" "}
                          <g id="line">
                            {" "}
                            <path
                              fill="none"
                              stroke="#9F587B"
                              stroke-linecap="round"
                              stroke-linejoin="round"
                              stroke-miterlimit="10"
                              stroke-width="2"
                              d="M39.5468,57.9985c0,2.3454-1.9013,4.2468-4.2468,4.2468s-4.2468-1.9013-4.2468-4.2468v-2.184 c0-2.3454,1.9013-4.2468,4.2468-4.2468c2.1645,0,3.9507,1.6193,4.2135,3.7125c0.022,0.175,0.0333,0.3533,0.0333,0.5342V57.9985z"
                            ></path>{" "}
                            <path
                              fill="none"
                              stroke="#9F587B"
                              stroke-linecap="round"
                              stroke-linejoin="round"
                              stroke-miterlimit="10"
                              stroke-width="2"
                              d="M42.6925,58.8074c0,4.0828-3.3097,7.3925-7.3925,7.3925s-7.3925-3.3097-7.3925-7.3925v-3.8019 c0-4.0828,3.3097-7.3925,7.3925-7.3925c3.7678,0,6.8772,2.8188,7.3346,6.4625c0.0382,0.3046,0.0579,0.615,0.0579,0.93V58.8074z"
                            ></path>{" "}
                            <path
                              fill="none"
                              stroke="#9F587B"
                              stroke-linecap="round"
                              stroke-linejoin="round"
                              stroke-miterlimit="10"
                              stroke-width="2"
                              d="M39.5468,37.1845c0,2.3454-1.9013,4.2468-4.2468,4.2468s-4.2468-1.9013-4.2468-4.2468v-2.184 c0-2.3454,1.9013-4.2468,4.2468-4.2468c2.1645,0,3.9507,1.6193,4.2135,3.7125c0.022,0.175,0.0333,0.3533,0.0333,0.5342V37.1845z"
                            ></path>{" "}
                            <path
                              fill="none"
                              stroke="#9F587B"
                              stroke-linecap="round"
                              stroke-linejoin="round"
                              stroke-miterlimit="10"
                              stroke-width="2"
                              d="M42.6925,37.9934c0,4.0828-3.3097,7.3925-7.3925,7.3925s-7.3925-3.3097-7.3925-7.3925v-3.8019 c0-4.0828,3.3097-7.3925,7.3925-7.3925c3.7678,0,6.8772,2.8188,7.3346,6.4625c0.0382,0.3046,0.0579,0.615,0.0579,0.93V37.9934z"
                            ></path>{" "}
                            <path
                              fill="none"
                              stroke="#9F587B"
                              stroke-linecap="round"
                              stroke-linejoin="round"
                              stroke-miterlimit="10"
                              stroke-width="2"
                              d="M39.5468,16.3705c0,2.3454-1.9013,4.2468-4.2468,4.2468s-4.2468-1.9013-4.2468-4.2468v-2.184 c0-2.3454,1.9013-4.2468,4.2468-4.2468c2.1645,0,3.9507,1.6193,4.2135,3.7125c0.022,0.175,0.0333,0.3533,0.0333,0.5342V16.3705z"
                            ></path>{" "}
                            <path
                              fill="none"
                              stroke="#9F587B"
                              stroke-linecap="round"
                              stroke-linejoin="round"
                              stroke-miterlimit="10"
                              stroke-width="2"
                              d="M42.6925,17.1794c0,4.0828-3.3097,7.3925-7.3925,7.3925s-7.3925-3.3097-7.3925-7.3925v-3.8019 c0-4.0828,3.3097-7.3925,7.3925-7.3925c3.7678,0,6.8772,2.8188,7.3346,6.4625c0.0382,0.3046,0.0579,0.615,0.0579,0.93V17.1794z"
                            ></path>{" "}
                            <line
                              x1="35.5"
                              x2="35.5"
                              y1="38.8919"
                              y2="54"
                              fill="none"
                              stroke="#9F587B"
                              stroke-linecap="round"
                              stroke-linejoin="round"
                              stroke-miterlimit="10"
                              stroke-width="2"
                            ></line>{" "}
                            <line
                              x1="35.5"
                              x2="35.5"
                              y1="17.9307"
                              y2="33.0389"
                              fill="none"
                              stroke="#9F587B"
                              stroke-linecap="round"
                              stroke-linejoin="round"
                              stroke-miterlimit="10"
                              stroke-width="2"
                            ></line>{" "}
                          </g>{" "}
                        </g>
                      </svg>
                    </i>
                    <span className="label-text">Pulseras</span>
                    <input
                      type="checkbox"
                      className="checkbox  checkbox-sm"
                      checked={isChecked("categoria", "Pulseras")}
                      value="Pulseras"
                      onChange={(e) => {
                        handleCheckbox(e, "categoria");
                      }}
                    />
                  </label>
                </div>
              </div>
            </div>
          ) : type === "color" ? (
            <div
              className="origin-top-right h-40 overflow-y-auto absolute right-0 p-1 w-40 rounded-md shadow-lg bg-white ring-1 ring-black ring-opacity-5 focus:outline-none z-10"
              role="menu"
              aria-orientation="vertical"
              aria-labelledby="menu-button"
            >
              <div className="" role="none">
                <div className="form-control">
                  <label className="label cursor-pointer">
                    <div className="inline-flex">
                      <span className="label-text">Tonos </span>
                      <i>
                        <div className="w-3 h-3 rounded-full bg-black mt-1 ml-3"></div>
                      </i>
                    </div>

                    <input
                      type="checkbox"
                      className="checkbox  checkbox-sm"
                      checked={isChecked("color", "Negro")}
                      value="Negro"
                      onChange={(e) => {
                        handleCheckbox(e, "color");
                      }}
                    />
                  </label>
                </div>
              </div>

              <div className="" role="none">
                <div className="form-control">
                  <label className="label cursor-pointer">
                    <div className="inline-flex">
                      <span className="label-text">Tonos </span>
                      <i>
                        <div className="w-3 h-3 rounded-full border bg-white mt-1 ml-3"></div>
                      </i>
                    </div>

                    <input
                      type="checkbox"
                      className="checkbox  checkbox-sm"
                      checked={isChecked("color", "Blanco")}
                      value="Blanco"
                      onChange={(e) => {
                        handleCheckbox(e, "color");
                      }}
                    />
                  </label>
                </div>
              </div>

              <div className="" role="none">
                <div className="form-control">
                  <label className="label cursor-pointer">
                    <div className="inline-flex">
                      <span className="label-text">Tonos </span>
                      <i>
                        <div className="w-3 h-3 rounded-full bg-gray-500 mt-1 ml-3"></div>
                      </i>
                    </div>

                    <input
                      type="checkbox"
                      className="checkbox  checkbox-sm"
                      checked={isChecked("color", "Gris")}
                      value="Gris"
                      onChange={(e) => {
                        handleCheckbox(e, "color");
                      }}
                    />
                  </label>
                </div>
              </div>

              <div className="" role="none">
                <div className="form-control">
                  <label className="label cursor-pointer">
                    <div className="inline-flex">
                      <span className="label-text">Tonos </span>
                      <i>
                        <div className="w-3 h-3 rounded-full bg-red-600 mt-1 ml-3"></div>
                      </i>
                    </div>

                    <input
                      type="checkbox"
                      className="checkbox  checkbox-sm"
                      checked={isChecked("color", "Rojo")}
                      value="Rojo"
                      onChange={(e) => {
                        handleCheckbox(e, "color");
                      }}
                    />
                  </label>
                </div>
              </div>

              <div className="" role="none">
                <div className="form-control">
                  <label className="label cursor-pointer">
                    <div className="inline-flex">
                      <span className="label-text">Tonos </span>
                      <i>
                        <div className="w-3 h-3 rounded-full bg-orange-500 mt-1 ml-3"></div>
                      </i>
                    </div>

                    <input
                      type="checkbox"
                      className="checkbox  checkbox-sm"
                      checked={isChecked("color", "Naranja")}
                      value="Naranja"
                      onChange={(e) => {
                        handleCheckbox(e, "color");
                      }}
                    />
                  </label>
                </div>
              </div>

              <div className="" role="none">
                <div className="form-control">
                  <label className="label cursor-pointer">
                    <div className="inline-flex">
                      <span className="label-text">Tonos </span>
                      <i>
                        <div className="w-3 h-3 rounded-full bg-yellow-400 mt-1 ml-3"></div>
                      </i>
                    </div>

                    <input
                      type="checkbox"
                      className="checkbox  checkbox-sm"
                      checked={isChecked("color", "Amarillo")}
                      value="Amarillo"
                      onChange={(e) => {
                        handleCheckbox(e, "color");
                      }}
                    />
                  </label>
                </div>
              </div>

              <div className="" role="none">
                <div className="form-control">
                  <label className="label cursor-pointer">
                    <div className="inline-flex">
                      <span className="label-text">Tonos </span>
                      <i>
                        <div className="w-3 h-3 rounded-full bg-lime-600 mt-1 ml-3"></div>
                      </i>
                    </div>

                    <input
                      type="checkbox"
                      className="checkbox  checkbox-sm"
                      checked={isChecked("color", "Verde")}
                      value="Verde"
                      onChange={(e) => {
                        handleCheckbox(e, "color");
                      }}
                    />
                  </label>
                </div>
              </div>

              <div className="" role="none">
                <div className="form-control">
                  <label className="label cursor-pointer">
                    <div className="inline-flex">
                      <span className="label-text">Tonos </span>
                      <i>
                        <div className="w-3 h-3 rounded-full bg-blue-600 mt-1 ml-3"></div>
                      </i>
                    </div>

                    <input
                      type="checkbox"
                      className="checkbox  checkbox-sm"
                      checked={isChecked("color", "Azul")}
                      value="Azul"
                      onChange={(e) => {
                        handleCheckbox(e, "color");
                      }}
                    />
                  </label>
                </div>
              </div>

              <div className="" role="none">
                <div className="form-control">
                  <label className="label cursor-pointer">
                    <div className="inline-flex">
                      <span className="label-text">Tonos </span>
                      <i>
                        <div className="w-3 h-3 rounded-full bg-indigo-700 mt-1 ml-3"></div>
                      </i>
                    </div>

                    <input
                      type="checkbox"
                      className="checkbox  checkbox-sm"
                      checked={isChecked("color", "Morado")}
                      value="Morado"
                      onChange={(e) => {
                        handleCheckbox(e, "color");
                      }}
                    />
                  </label>
                </div>
              </div>

              <div className="" role="none">
                <div className="form-control">
                  <label className="label cursor-pointer">
                    <div className="inline-flex">
                      <span className="label-text">Tonos </span>
                      <i>
                        <div className="w-3 h-3 rounded-full bg-pink-500 mt-1 ml-3"></div>
                      </i>
                    </div>

                    <input
                      type="checkbox"
                      className="checkbox  checkbox-sm"
                      checked={isChecked("color", "Rosado")}
                      value="Rosado"
                      onChange={(e) => {
                        handleCheckbox(e, "color");
                      }}
                    />
                  </label>
                </div>
              </div>

              <div className="" role="none">
                <div className="form-control">
                  <label className="label cursor-pointer">
                    <div className="inline-flex">
                      <span className="label-text">Tonos </span>
                      <i>
                        <div className="w-3 h-3 rounded-full bg-amber-950 mt-1 ml-3"></div>
                      </i>
                    </div>

                    <input
                      type="checkbox"
                      className="checkbox  checkbox-sm"
                      checked={isChecked("color", "Cafe")}
                      value="Cafe"
                      onChange={(e) => {
                        handleCheckbox(e, "color");
                      }}
                    />
                  </label>
                </div>
              </div>
            </div>
          ) : type === "shapes" ? (
            <>
              <div
                className="origin-top-right h-40 overflow-y-auto absolute right-0 p-1 w-40 rounded-md shadow-lg bg-white ring-1 ring-black ring-opacity-5 focus:outline-none z-10"
                role="menu"
                aria-orientation="vertical"
                aria-labelledby="menu-button"
              >
                {list.map((element) => {
                  return (
                    <div className="" role="none">
                      <div className="form-control">
                        <label className="label cursor-pointer">
                          <div className="inline-flex">
                            <span className="label-text">{element}</span>
                            {/* <i>
                        <div className="w-3 h-3 rounded-full bg-black mt-1 ml-3"></div>
                      </i> */}
                          </div>

                          <input
                            type="checkbox"
                            className="checkbox  checkbox-sm"
                            checked={isChecked("forma", element)}
                            value={element}
                            onChange={(e) => {
                              handleCheckbox(e, "forma");
                            }}
                          />
                        </label>
                      </div>
                    </div>
                  );
                })}
              </div>
            </>
          ) : type === "size" ? (
            <>
              <div
                className="origin-top-right h-40 overflow-y-auto absolute right-0 p-1 w-40 rounded-md shadow-lg bg-white ring-1 ring-black ring-opacity-5 focus:outline-none z-10"
                role="menu"
                aria-orientation="vertical"
                aria-labelledby="menu-button"
              >
                {list.map((element) => {
                  return (
                    <div className="" role="none">
                      <div className="form-control">
                        <label className="label cursor-pointer">
                          <div className="inline-flex">
                            <span className="label-text">{element}</span>
                            {/* <i>
                        <div className="w-3 h-3 rounded-full bg-black mt-1 ml-3"></div>
                      </i> */}
                          </div>

                          <input
                            type="checkbox"
                            className="checkbox  checkbox-sm"
                            checked={isChecked("tam", element)}
                            value={element}
                            onChange={(e) => {
                              handleCheckbox(e, "tam");
                            }}
                          />
                        </label>
                      </div>
                    </div>
                  );
                })}
              </div>
            </>
          ) : type === "material" ? (
            <>
              <div
                className="origin-top-right h-40 overflow-y-auto absolute right-0 p-1 w-40 rounded-md shadow-lg bg-white ring-1 ring-black ring-opacity-5 focus:outline-none z-10"
                role="menu"
                aria-orientation="vertical"
                aria-labelledby="menu-button"
              >
                {list.map((element) => {
                  return (
                    <div className="" role="none">
                      <div className="form-control">
                        <label className="label cursor-pointer">
                          <div className="inline-flex">
                            <span className="label-text">{element}</span>
                            {/* <i>
                        <div className="w-3 h-3 rounded-full bg-black mt-1 ml-3"></div>
                      </i> */}
                          </div>

                          <input
                            type="checkbox"
                            className="checkbox  checkbox-sm"
                            checked={isChecked("material", element)}
                            value={element}
                            onChange={(e) => {
                              handleCheckbox(e, "material");
                            }}
                          />
                        </label>
                      </div>
                    </div>
                  );
                })}
              </div>
            </>
          ) : (
            <></>
          )}
        </>
      )}
    </div>
  );
};
